package ua.petproject.annotations;

import io.github.classgraph.ClassGraph;
import io.github.classgraph.ClassInfo;
import io.github.classgraph.ScanResult;
import lombok.extern.slf4j.Slf4j;
import ua.petproject.util.DataBaseConnection;
import ua.petproject.util.PropertiesLoader;

import java.lang.reflect.Field;
import java.sql.*;

/**
 * Class for tables creation if they don't exist.
 */
@Slf4j
public class CreateEntityTables {

    private static final String PACKAGES_TO_SCAN = PropertiesLoader.getProperty("component.scan");

    public static void init() {
        try(Connection connection = DataBaseConnection.getInstance().getConnection();
            ScanResult scanResult = new ClassGraph().whitelistPackages(PACKAGES_TO_SCAN).scan()){

            for(ClassInfo classInfo : scanResult.getAllClasses()){

                Class classElement = classInfo.loadClass();

                boolean isEntityPresent = classElement.isAnnotationPresent(Entity.class);

                if(isEntityPresent) {

                    String tableName = getTableName(classElement);

                    boolean isTableExistsInDatabase = checkIsTableExists(tableName);

                    if (!isTableExistsInDatabase) {

                        String sqlFieldsDeclaration = getSqlFieldsDeclaration(classElement.getDeclaredFields());

                        String sqlQuery = "CREATE TABLE IF NOT EXISTS " + tableName + " ( " + sqlFieldsDeclaration + " );";

                        Statement statement = connection.createStatement();
                        statement.executeUpdate(sqlQuery);
                        log.info(String.format("New table [%s] created in the database!", tableName));
                    }
                }

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static String getSqlFieldsDeclaration(Field[] declaredFields) {
        String sqlFieldsDeclaration = "";

        for (int i = 0; i < declaredFields.length; i++) {

            // checking on field annotations
            boolean isColumn = declaredFields[i].isAnnotationPresent(Column.class);
            boolean isAutoGeneratedValue = declaredFields[i].isAnnotationPresent(AutoGeneratedValue.class);
            boolean isId = declaredFields[i].isAnnotationPresent(Id.class);

            String columnName;
            String columnType;
            String primaryKey = "";
            String comaDelimiterIfFieldNotFirstOne = "";
            if (isId) {
                primaryKey = " PRIMARY KEY";
            }
            if (isColumn) {
                if (!declaredFields[i].getAnnotation(Column.class).name().equals("")) {
                    columnName = declaredFields[i].getAnnotation(Column.class).name();
                } else {
                    columnName = declaredFields[i].getName().toLowerCase();
                }
                if (isAutoGeneratedValue) {
                    columnType = "SERIAL";
                } else {
                    String javaDataType = declaredFields[i].getType().getSimpleName().toUpperCase();
                    columnType = DataTypeForFields.valueOf(javaDataType).getValue();
                }

                if (columnType.equals("VARCHAR")) {
                    columnType = columnType + "(" + declaredFields[i].getAnnotation(Column.class).max() + ")";
                }

                if (i != 0) {
                    comaDelimiterIfFieldNotFirstOne = ", ";
                }
                sqlFieldsDeclaration = sqlFieldsDeclaration + comaDelimiterIfFieldNotFirstOne + columnName + " "
                        + columnType + primaryKey;
            }
        }
        return sqlFieldsDeclaration;
    }

    private static boolean checkIsTableExists(String tableName) {
        try(Connection connection = DataBaseConnection.getInstance().getConnection()) {
            connection.createStatement().executeQuery("SELECT * FROM " + tableName + " LIMIT 1;");
            return true;
        } catch (SQLException e) {
            return false;
        }
    }

    private static String getTableName(Class classElement) {
        boolean isTableNameSpecified = classElement.isAnnotationPresent(Table.class) && ((Table) classElement.getAnnotation(Table.class)).name() != null;

        if (isTableNameSpecified) {
            return  ((Table) classElement.getAnnotation(Table.class)).name();
        } else {
            return classElement.getSimpleName().toLowerCase();
        }
    }

}
